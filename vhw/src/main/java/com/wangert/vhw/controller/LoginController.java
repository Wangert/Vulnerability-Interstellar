package com.wangert.vhw.controller;

import com.wangert.vhw.contracts.UserStorageContract;
import com.wangert.vhw.service.UserRegistService;
import com.wangert.vhw.utils.AESUtil;
import com.wangert.vhw.utils.FileUtil;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.Base64;
import java.util.Map;

/**
 * 登录控制层
 * @Author: Wangert
 */


@Controller
public class LoginController {

    //用户登录
    //@ResponseBody
    @RequestMapping("/login")
    public String login(HttpSession session, String loginUsername, String loginAddress, String loginPassword, Map<String, Object> map) {


        UserStorageContract userStorageContract = new UserStorageContract();
        AESUtil aesUtil = new AESUtil();

        String encryptedPassword = Base64.getEncoder().encodeToString(aesUtil.encrypt(loginPassword, "JitaoAndWangert"));

        //判断用户名有效性
        if (userStorageContract.verifyUser(loginUsername, loginAddress, encryptedPassword)) {

            session.setAttribute("loginUsername", loginUsername);

            return "redirect:/homePage";

        }

/*

        //判断用户名有效性
        if ("wangjitaotest".equals(loginAddress) && "wangert".equals(loginPassword)) {

            session.setAttribute("loginUsername", loginUsername);

            return "redirect:/homePage";

        }
        */

        //登录失败
        map.put("msg", "Username, Address or Password Error!");

        return "login";
    }

    //退出登录
    @GetMapping("/logout")
    public String logout(HttpSession session) {
        //清空session信息
        session.removeAttribute("loginUsername");
        //注销session
        session.invalidate();
        //返回登录页面
        return "redirect:/index.html";
    }

    //用户注册
    @RequestMapping("/register")
    public String register(HttpSession session, String loginUsername, String loginPassword, String loginRepeatPassword, Map<String, Object> map) {

        //判断输入是否为空
        if (session.getAttribute("flag") == null || loginUsername == null || loginPassword == null || loginRepeatPassword == null || loginUsername == "" || loginPassword == "" || loginRepeatPassword == "") {

            session.setAttribute("flag", "ok");
            return "register";

        }
/*
        //用户合约调用对象
        UserStorageContract userStorageContract = new UserStorageContract();

        //判断用户是否存在
        if (userStorageContract.userExisted(loginUsername)) {

            map.put("msg", "The user already exists!");
            return "register";

        }
        */

        //判断两次密码是否输入一样
        if (!loginPassword.equals(loginRepeatPassword)) {

            map.put("msg", "The passwords don't match twice！");
            return "register";

        }

        //通过AES加密算法对密码进行加密
        AESUtil aesUtil = new AESUtil();
        String encryptedPassword = Base64.getEncoder().encodeToString(aesUtil.encrypt(loginPassword, "JitaoAndWangert"));

        System.out.println("encryptedPassword:" + encryptedPassword);
/*
        //新用户信息记录到区块链
        //定义用户注册服务对象
        UserRegistService userRegistService = new UserRegistService();
        //通过用户名生存VHW地址
        String vhwAddress = userRegistService.getVhwAddressByUsername(loginUsername);

        System.out.println("vhwAddress:" + vhwAddress);

        //通过AES加密算法对密码进行加密
        AESUtil aesUtil = new AESUtil();
        String encryptedPassword = Base64.getEncoder().encodeToString(aesUtil.encrypt(loginPassword, "JitaoAndWangert"));

        System.out.println("encryptedPassword:" + encryptedPassword);

        //写入区块链
        if (userStorageContract.addUser(loginUsername, vhwAddress, encryptedPassword)) {

            System.out.println("新用户" + loginUsername + "添加成功！");
        } else {

            System.out.println("用户" + loginUsername + "添加失败！");
        }

        //将新用户添加到用户列表缓存中
        FileUtil fileUtil = new FileUtil();
        try {
            fileUtil.fileWrite(loginUsername, "src/main/resources/dataCache/userList.txt");
        }catch (IOException e) {
            e.printStackTrace();
        }

*/
        map.put("username", loginUsername);
        map.put("encryptedPassword", encryptedPassword);

        return "redirect:/registWait2";

    }

    //注册成功后返回用户VHW地址
    @RequestMapping("/registerSuccess")
    public String registerSuccess(String username, String encryptedPassword, Map<String, Object> map) {

        UserStorageContract userStorageContract = new UserStorageContract();

        //判断用户是否存在
        if (userStorageContract.userExisted(username)) {

            map.put("msg", "The user already exists!");
            return "register";

        }

        //新用户信息记录到区块链
        //定义用户注册服务对象
        UserRegistService userRegistService = new UserRegistService();
        //通过用户名生存VHW地址
        String vhwAddress = userRegistService.getVhwAddressByUsername(username);

        System.out.println("vhwAddress:" + vhwAddress);


        //写入区块链
        if (userStorageContract.addUser(username, vhwAddress, encryptedPassword)) {

            System.out.println("新用户" + username + "添加成功！");
        } else {

            System.out.println("用户" + username + "添加失败！");
        }

        //将新用户添加到用户列表缓存中
        FileUtil fileUtil = new FileUtil();
        try {
            fileUtil.fileWrite(username, "src/main/resources/dataCache/userList.txt");
        }catch (IOException e) {
            e.printStackTrace();
        }

        map.put("username", username);


        //String vhwAddress = userStorageContract.getVhwAddressByUsername(username);

        if (vhwAddress == null) {

            return "error";
        }

        map.put("vhw", vhwAddress);

        return "registerSuccess";

    }

    @RequestMapping("/registerSuccessTest")
    public String test() {

        return "registerSuccess";

    }


    //注册等待界面
    @RequestMapping("/registWait2")
    public String registWait(String username, String encryptedPassword, Map<String, Object> map) {

        map.put("username", username);
        map.put("encryptedPassword", encryptedPassword);

        return "registWait2";
    }

}
