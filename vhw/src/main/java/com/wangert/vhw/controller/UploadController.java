package com.wangert.vhw.controller;

import com.wangert.vhw.service.PatchService;
import com.wangert.vhw.service.VulnerabilityService;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpSession;
import java.io.File;
import java.io.FileOutputStream;

/**
 *
 * 文件上传控制类
 * Author：Wangert
 *
 */

@RestController
public class UploadController {

    @PostMapping("/uploadVulnerability")
    public String uploadVulnerability(MultipartFile file) {

        System.out.println("okok");

        String fileName = file.getOriginalFilename();

        System.out.println(fileName);

        if(fileName.indexOf("\\") != -1){
            fileName = fileName.substring(fileName.lastIndexOf("\\"));
        }

        String filePath = "src/main/resources/files/vulnerabilities/";
        File targetFile = new File(filePath);
        if(!targetFile.exists()){
            targetFile.mkdirs();
        }

        FileOutputStream out = null;
        try {
            out = new FileOutputStream(filePath + fileName);
            out.write(file.getBytes());
            out.flush();
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
            return "error";
        }

        return "success";
    }

    @PostMapping("/uploadPatch")
    public String uploadPatch(MultipartFile file) {

        System.out.println("okok");

        String fileName = file.getOriginalFilename();

        System.out.println(fileName);

        if(fileName.indexOf("\\") != -1){
            fileName = fileName.substring(fileName.lastIndexOf("\\"));
        }

        String filePath = "src/main/resources/files/patches/";
        File targetFile = new File(filePath);
        if(!targetFile.exists()){
            targetFile.mkdirs();
        }

        FileOutputStream out = null;
        try {
            out = new FileOutputStream(filePath + fileName);
            out.write(file.getBytes());
            out.flush();
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
            return "fail";
        }

        return "success";
    }


    @PostMapping("/submitFormV")
    public String submitFormV(HttpSession session, String name, String description, String fileName) {

        String publisher = session.getAttribute("loginUsername").toString();

        System.out.println(publisher);

        //System.out.println(session.getAttribute("loginUsername"));

        if (name != null && description != null && fileName != null) {
            //漏洞服务类对象
            VulnerabilityService vulnerabilityService = new VulnerabilityService();
            //发布新漏洞到区块链
            boolean flag = vulnerabilityService.publishVulnerability(publisher, name, description, fileName);

            if (flag == false) {
                return "vulnerability publish failed!";
            }

            System.out.println("name:" + name);
            System.out.println("description:" + description);
            System.out.println("fileName:" + fileName);

            return "success";
        }

        return "Name, Description or FileName is null!";
    }

    @PostMapping("/submitFormP")
    public String submitFormP(HttpSession session, String vulnerabilityHash, String name, String description, String fileName) {

        String publisher = session.getAttribute("loginUsername").toString();

        System.out.println(publisher);

        if (name != null && description != null && fileName != null) {
            //补丁服务类对象
            PatchService patchService = new PatchService();
            //发布新补丁到区块链
            boolean flag = patchService.publishPatch(publisher, vulnerabilityHash, name, description, fileName);

            if (flag == false) {
                return "patch publish failed!";
            }

            System.out.println("vulnerabilityHash:" + vulnerabilityHash);
            System.out.println("name:" + name);
            System.out.println("description:" + description);

            return "success";
        }

        return "error";
    }




}
