package com.wangert.vhw.contracts;

import cn.hyperchain.sdk.common.utils.FuncParams;
import org.javatuples.Pair;
import java.io.IOException;
import java.math.BigInteger;
import java.util.List;


/**
 *
 * 用户数据存储合约
 * 基于飞洛区块链的合约方法封装
 * @Author：Wangert
 *
 */

public class UserStorageContract {

    //合约数据
    FiloeanContract filoeanContract;
    //合约abi路径
    String abiPath;
    //合约bin路径
    String binPath;

    //构造函数，初始化
    public UserStorageContract() {

        this.filoeanContract = new FiloeanContract("0x679a9f59e21399dd46fb3711aafbaa6055c90179", "user");
        this.abiPath = "solidity/UserStorage.abi";
        this.binPath = "solidity/UserStorage.bin";

        try {
            //加载合约
            this.filoeanContract.filoean.loadBinAndAbi(this.binPath, this.abiPath);

        }catch (IOException e) {

            e.printStackTrace();

        }

    }

    //判断用户是否存在
    public boolean userExisted(String username) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "userExisted(string)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //用户登录验证
    public boolean verifyUser(String username, String vhwAddress, String encryptedPassword) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(vhwAddress);
        funcParams.addParams(encryptedPassword);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "verifyUser(string,string,string)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //新增用户
    public boolean addUser(String username, String vhwAddress, String encryptedPassword) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(vhwAddress);
        funcParams.addParams(encryptedPassword);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "addUser(string,string,string)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //用户增加发布的漏洞
    public boolean addReleaseVulnerability(String username, String vulnerabilityIpfsHash) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(vulnerabilityIpfsHash);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "addReleaseVulnerability(string,string)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //用户增加发布的补丁
    public boolean addReleasePatch(String username, String patchIpfsHash) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(patchIpfsHash);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "addReleasePatch(string,string)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //增加用户漏洞评分情况
    public boolean addAssessVulnerabilitiesScore(String username, String ipfsHash, int score) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(ipfsHash);

        //将int类型转化为BigInteger
        BigInteger b = BigInteger.valueOf(score);
        funcParams.addParams(b);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "addAssessVulnerabilitiesScore(string,string,uint8)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //增加用户补丁评分情况
    public boolean addAssessPatchScore(String username, String ipfsHash, int score) {


        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(ipfsHash);
        //将int类型转化为BigInteger
        BigInteger b = BigInteger.valueOf(score);
        funcParams.addParams(b);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "addAssessPatchScore(string,string,uint8)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //增加用户总贡献值
    public boolean addTotalAndResidualContribution(String username, int contribution) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        //将int类型转化为BigInteger
        BigInteger b = BigInteger.valueOf(contribution);
        funcParams.addParams(b);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "addTotalAndResidualContribution(string,uint64)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //消耗剩余贡献值
    public boolean useResidualContribution(String username, int useContribution) {

        boolean result;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        //将int类型转化为BigInteger
        BigInteger b = BigInteger.valueOf(useContribution);
        funcParams.addParams(b);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "useResidualContribution(string,uint64)", funcParams);

        result = Boolean.valueOf(objects.get(0).toString());

        return result;

    }

    //获取用户贡献值情况
    public Pair<Integer, Integer> getContributionStatusWithUser(String username) {

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getContributionStatusWithUser(string)", funcParams);

        //获取用户总贡献值和用户剩余贡献值
        Pair<Integer, Integer> pair = new Pair<>(Integer.valueOf(objects.get(0).toString()), Integer.valueOf(objects.get(1).toString()));

        return pair;
    }

    //获取发布漏洞数
    public int getNumberOfReleasedVulnerability(String username) {
        //发布漏洞数
        int vCount;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getNumberOfReleasedVulnerability(string)", funcParams);

        vCount = Integer.parseInt(objects.get(0).toString());

        return vCount;

    }

    //获取发布补丁数
    public int getNumberOfReleasedPatch(String username) {
        //发布漏洞数
        int pCount;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getNumberOfReleasedPatch(string)", funcParams);

        pCount = Integer.parseInt(objects.get(0).toString());

        return pCount;

    }

    //根据索引获取发布漏洞的ipfs哈希
    public String getVulnerabilityIpfsHashByIndex(String username, int index) {

        //漏洞程序对应的ipfs哈希
        String ipfsHash;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        //int转bigInteger
        BigInteger b = BigInteger.valueOf(index);
        funcParams.addParams(b);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityIpfsHashByIndex(string,unit64)", funcParams);

        ipfsHash =  objects.get(0).toString();

        return ipfsHash;

    }

    //根据索引获取发布补丁的ipfs哈希
    public String getPatchIpfsHashByIndex(String username, int index) {

        //漏洞程序对应的ipfs哈希
        String ipfsHash;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        //int转bigInteger
        BigInteger b = BigInteger.valueOf(index);
        funcParams.addParams(b);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getPatchIpfsHashByIndex(string,unit64)", funcParams);

        ipfsHash =  objects.get(0).toString();

        return ipfsHash;

    }

    //根据用户获取对应的漏洞评分
    public int getVulnerabilityAssessScoreByUser(String username, String assessor) {

        //漏洞评分
        int score;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(assessor);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityAssessScoreByUser(string,string)", funcParams);

        score = Integer.parseInt(objects.get(0).toString());

        return score;

    }

    //根据用户获取对应的补丁评分
    public int getPatchAssessScoreByUser(String username, String assessor) {

        //漏洞评分
        int score;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);
        funcParams.addParams(assessor);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getPatchAssessScoreByUser(string,string)", funcParams);

        score = Integer.parseInt(objects.get(0).toString());

        return score;

    }

    //根据用户名获取对应的VHW地址
    public String getVhwAddressByUsername(String username) {

        //vhw地址
        String vhwAddress;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVhwAddressByUsername(string)", funcParams);

        vhwAddress = objects.get(0).toString();

        return vhwAddress;
    }

    //根据用户名获取对应的密码加密后密文
    public String getEncryptedPasswordByUsername(String username) {

        //密码密文
        String encryptedPassword;

        //设置合约方法参数
        FuncParams funcParams = new FuncParams();
        funcParams.addParams(username);

        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getEncryptedPasswordByUsername(string)", funcParams);

        encryptedPassword = objects.get(0).toString();

        return encryptedPassword;

    }


    /*
    public static void main(String[] args) {

        UserStorageContract userStorageContract = new UserStorageContract();

        boolean a =userStorageContract.userExisted("test");

        System.out.println(a);

        String vhw = userStorageContract.getVhwAddressByUsername("test");
        String encrypted = userStorageContract.getEncryptedPasswordByUsername("test");
        //boolean b = userStorageContract.addUser("test", "test", "test");
        //boolean b = userStorageContract.addReleaseVulnerability("test", "test");

        //boolean b = userStorageContract.addTotalAndResidualContribution("test", 10);
        System.out.println("result:" + vhw);
        System.out.println("result:" + encrypted);

        //Pair<Integer, Integer> pair = userStorageContract.getContributionStatusWithUser("test");
        //System.out.println("total contribution:" + pair.getValue0().intValue());
        //System.out.println("residual contribution:" + pair.getValue1().intValue());



        //int i = userStorageContract.getNumberOfReleasedVulnerability("test");

        //System.out.println("result:" + i);

    }
*/
}
