package com.wangert.vhw.service;

import com.wangert.vhw.contracts.UserStorageContract;
import com.wangert.vhw.utils.FileUtil;
import com.wangert.vhw.utils.PropertyUtil;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * 个人中心显示数据操作类
 * @Author：Wangert
 *
 */

public class PersonalCenterDataAcquireService {

    //主页数据缓存路径
    final String homePageDataPath = "src/main/resources/dataCache/homePageData.properties";
    //主页补丁数据缓存路径
    final String homePageDataPatchPath = "src/main/resources/dataCache/homePageDataPatch.properties";
    //记录每个用户所发布的漏洞缓存文件的前缀
    final String userVulnerabilitiesPreix = "src/main/resources/dataCache/userVulnerabilities/";
    //记录每个用户所发布的补丁缓存文件的前缀
    final String userPatchesPrefix = "src/main/resources/dataCache/userPatches/";
    //记录每个漏洞对应的补丁列表文件的前缀
    final String patchesOfVulnerabilityPrefix = "src/main/resources/dataCache/patchesOfVulnerability/";


    //根据用户名获取用户所有发布的漏洞信息
    public List<Map<String, Object>> acquireAllVulnerabilitiesByUsername(String username) {

        //记录用户发布的漏洞列表
        List<Map<String, Object>> userVulnerabilitiesDataList = new ArrayList<>();
        //文件操作对象
        FileUtil fileUtil = new FileUtil();
        //漏洞Hash列表
        ArrayList<String> userVulnerabilitiesList = new ArrayList<String>();
        //主页数据缓存文件操作对象
        PropertyUtil propertyUtil = new PropertyUtil(homePageDataPath);
        //用户合约操作对象
        UserStorageContract userStorageContract = new UserStorageContract();


        try {
            //获取所有的漏洞
            userVulnerabilitiesList = fileUtil.fileRead(userVulnerabilitiesPreix + username + ".txt");

            System.out.println(username + "漏洞数量:" + userVulnerabilitiesList.size());

            for (String ipfsHash : userVulnerabilitiesList) {

                System.out.println(ipfsHash);
                //从缓存文件中获取数据
                String s = propertyUtil.getData(ipfsHash);
                String[] arrStr = s.split("@@@");

                //漏洞名称@@@发布者@@@发布时间@@@修复时间@@@漏洞描述@@@漏洞star数@@@漏洞评分
                Map<String, Object> map = new HashMap<>();
                map.put("ipfsHash", ipfsHash);
                map.put("vulnerabilityName", arrStr[0]);
                map.put("username", arrStr[1]);
                map.put("releaseDate", arrStr[2]);
                map.put("fixDate", arrStr[3]);
                map.put("description", arrStr[4]);
                map.put("star", Integer.parseInt(arrStr[5]));
                map.put("score", Integer.parseInt(arrStr[6]));

                userVulnerabilitiesDataList.add(map);

            }

        }catch (Exception e) {
            e.printStackTrace();
        }

        return userVulnerabilitiesDataList;
    }

    //根据用户名获取用户所有发布的补丁信息
    public List<Map<String, Object>> acquireAllPatchesByUsername(String username) {

        //记录用户发布的补丁列表
        List<Map<String, Object>> userPatchesDataList = new ArrayList<>();
        //文件操作对象
        FileUtil fileUtil = new FileUtil();
        //补丁Hash列表
        ArrayList<String> userPatchesList = new ArrayList<String>();
        //主页数据缓存文件操作对象
        PropertyUtil propertyUtil = new PropertyUtil(homePageDataPatchPath);
        //用户合约操作对象
        UserStorageContract userStorageContract = new UserStorageContract();


        try {
            //获取所有的漏洞
            userPatchesList = fileUtil.fileRead(userPatchesPrefix + username + ".txt");

            System.out.println(username + "补丁数量:" + userPatchesList.size());

            for (String ipfsHash : userPatchesList) {

                System.out.println(ipfsHash);
                //从缓存文件中获取数据
                String s = propertyUtil.getData(ipfsHash);
                String[] arrStr = s.split("@@@");

                //补丁名称@@@发布者@@@对应的漏洞Hash发布时间@@@补丁描述@@@补丁star数@@@补丁评分
                Map<String, Object> map = new HashMap<>();
                map.put("ipfsHash", ipfsHash);
                map.put("patchName", arrStr[0]);
                map.put("username", arrStr[1]);
                map.put("vulnerabilityHash", arrStr[2]);
                map.put("releaseDate", arrStr[3]);
                map.put("description", arrStr[4]);
                map.put("star", Integer.parseInt(arrStr[5]));
                map.put("score", Integer.parseInt(arrStr[6]));

                userPatchesDataList.add(map);

            }

        }catch (Exception e) {
            e.printStackTrace();
        }

        return userPatchesDataList;
    }

    //获取漏洞对应的补丁数量
    public int getNumberOfPatchWithVulnerability(String vulnerabilityHash) {

        ArrayList<String> patchesOfVulnerability = new ArrayList<>();

        FileUtil fileUtil = new FileUtil();

        try {
            patchesOfVulnerability = fileUtil.fileRead(patchesOfVulnerabilityPrefix + vulnerabilityHash + ".txt");
        }catch (IOException e) {
            e.printStackTrace();
        }

        return patchesOfVulnerability.size();
    }

    //根据漏洞获取对应补丁信息
    public List<Map<String, Object>> acquireAllPatchesByVulnerability(String vulnerabilityHash) {

        List<Map<String, Object>> patchesOfVulnerability = new ArrayList<>();
        PropertyUtil propertyUtil = new PropertyUtil(homePageDataPatchPath);
        ArrayList<String> patchList = new ArrayList<>();
        FileUtil fileUtil = new FileUtil();

        try {
            //获取所有的补丁
            patchList = fileUtil.fileRead(patchesOfVulnerabilityPrefix + vulnerabilityHash + ".txt");

            System.out.println(vulnerabilityHash + "补丁数量:" + patchList.size());

            for (String ipfsHash : patchList) {

                System.out.println(ipfsHash);
                //从缓存文件中获取数据
                String s = propertyUtil.getData(ipfsHash);
                String[] arrStr = s.split("@@@");

                //补丁名称@@@发布者@@@对应的漏洞Hash发布时间@@@补丁描述@@@补丁star数@@@补丁评分
                Map<String, Object> map = new HashMap<>();
                map.put("ipfsHash", ipfsHash);
                map.put("patchName", arrStr[0]);
                map.put("username", arrStr[1]);
                map.put("vulnerabilityHash", arrStr[2]);
                map.put("releaseDate", arrStr[3]);
                map.put("description", arrStr[4]);
                map.put("star", Integer.parseInt(arrStr[5]));
                map.put("score", Integer.parseInt(arrStr[6]));

                patchesOfVulnerability.add(map);

            }

        }catch (Exception e) {
            e.printStackTrace();
        }


        return patchesOfVulnerability;

    }



}
