package com.wangert.vhw.service;

import com.wangert.vhw.contracts.UserStorageContract;
import com.wangert.vhw.utils.FileUtil;
import com.wangert.vhw.utils.PropertyUtil;
import org.javatuples.Pair;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * 平台主页数据获取服务类
 * @Author:Wangert
 *
 */

public class HomeDataAcquireService {
    
    //用户缓存列表路径
    final String userListPath = "src/main/resources/dataCache/userList.txt";
    //用户漏洞缓存列表路径
    final String vulnerabilityListPath = "src/main/resources/dataCache/vulnerabilityList.txt";
    //用户补丁缓存列表路径
    final String patchListPath = "src/main/resources/dataCache/patchList.txt";
    //主页数据缓存路径
    final String homePageDataPath = "src/main/resources/dataCache/homePageData.properties";
    //主页补丁数据缓存路径
    final String homePageDataPatchPath = "src/main/resources/dataCache/homePageDataPatch.properties";
    //漏洞记录
    final String vulnerabilityAssessmentPath = "src/main/resources/dataCache/dashboardData/vulnerabilityAssessment.txt";
    //补丁记录
    final String patchAssessmentPath = "src/main/resources/dataCache/dashboardData/patchAssessment.txt";

    /**
     *
     * 从主页数据缓存文件中读取数据
     * 若在缓存中未发现所需数据，则从区块链上获取，并添加到缓存中
     * 若区块链上为所需数据，则将该相关数据删除
     *
     */

    public List<Map<String, Object>> acquireUserContributionList() {

        //文件操作对象
        FileUtil fileUtil = new FileUtil();
        //用户存储列表
        ArrayList<String> userList = new ArrayList<String>();
        //主页数据缓存文件操作对象
        PropertyUtil propertyUtil = new PropertyUtil(homePageDataPath);
        //存储用户贡献值数据
        List<Map<String, Object>> userContributionList = new ArrayList<>();
        //用户合约操作对象
        UserStorageContract userStorageContract = new UserStorageContract();
        
        try {

            //获取所有用户
            userList = fileUtil.fileRead(userListPath);

            System.out.println(userList.size());

            //遍历所有用户
            for (String username : userList) {

                System.out.println(username);

                //若为null，说明主页数据缓存中无该用户的贡献值数据
                if (propertyUtil.getData(username + "Contribution") == null) {

                    //判断用户是否存在
                    if (!userStorageContract.userExisted(username)) {

                        System.out.println(username + " not exist!");
                        continue;
                    }

                    //从区块链获取总贡献值和剩余贡献值
                    Pair<Integer, Integer> pair = userStorageContract.getContributionStatusWithUser(username);
                    String newUserContributionData = pair.getValue0().intValue() + "@@@" + pair.getValue1().intValue();
                    //写入主页缓存文件
                    propertyUtil.appendData(username + "Contribution", newUserContributionData, username + "=totalContribution@@@residualContribution");

                    Map<String, Object> tempMap = new HashMap<>();
                    tempMap.put("username", username);
                    tempMap.put("totalContribution", pair.getValue0().intValue());
                    tempMap.put("residualContribution", pair.getValue1().intValue());

                    //将用户数据添加到列表中
                    userContributionList.add(tempMap);

                } else {

                    //System.out.println("exist!");

                    //从缓存中读取数据
                    String s = propertyUtil.getData(username + "Contribution");
                    String[] arrStr = s.split("@@@");

                    Map<String, Object> tempMap = new HashMap<>();
                    tempMap.put("username", username);
                    tempMap.put("totalContribution", Integer.parseInt(arrStr[0]));
                    tempMap.put("residualContribution", Integer.parseInt(arrStr[1]));

                    //System.out.println(Integer.parseInt(arrStr[0]));

                    //将用户数据添加到列表中
                    userContributionList.add(tempMap);

                }

            }
            
        }catch (Exception e) {
            e.printStackTrace();
        }

        //System.out.println("userContributionListSize:" + userContributionList.size());


        return userContributionList;

    }

    //获取漏洞显示数据信息
    public List<Map<String, Object>> acquireVulnerabilityList() {

        //文件操作对象
        FileUtil fileUtil = new FileUtil();
        //漏洞Hash列表
        ArrayList<String> vulnerabilityList = new ArrayList<String>();
        //主页数据缓存文件操作对象
        PropertyUtil propertyUtil = new PropertyUtil(homePageDataPath);
        //存储漏洞数据
        List<Map<String, Object>> vulnerabilityDataList = new ArrayList<>();
        //用户合约操作对象
        UserStorageContract userStorageContract = new UserStorageContract();


        try {
            //获取所有的漏洞
            vulnerabilityList = fileUtil.fileRead(vulnerabilityListPath);

            System.out.println("漏洞数量:" +vulnerabilityList.size());

            for (String ipfsHash : vulnerabilityList) {

                System.out.println(ipfsHash);
                //从缓存文件中获取数据
                String s = propertyUtil.getData(ipfsHash);
                String[] arrStr = s.split("@@@");

                //漏洞名称@@@发布者@@@发布时间@@@修复时间@@@漏洞描述@@@漏洞star数@@@漏洞评分
                Map<String, Object> map = new HashMap<>();
                map.put("ipfsHash", ipfsHash);
                map.put("vulnerabilityName", arrStr[0]);
                map.put("username", arrStr[1]);
                map.put("releaseDate", arrStr[2]);
                map.put("fixDate", arrStr[3]);
                map.put("description", arrStr[4]);
                map.put("star", Integer.parseInt(arrStr[5]));
                map.put("score", Integer.parseInt(arrStr[6]));

                vulnerabilityDataList.add(map);

            }

        }catch (Exception e) {
            e.printStackTrace();
        }



        return vulnerabilityDataList;
    }

    //获取补丁显示数据信息
    public List<Map<String, Object>> acquirePatchList() {

        //文件操作对象
        FileUtil fileUtil = new FileUtil();
        //补丁Hash列表
        ArrayList<String> patchList = new ArrayList<String>();
        //主页数据缓存文件操作对象
        PropertyUtil propertyUtil = new PropertyUtil(homePageDataPatchPath);
        //存储补丁数据
        List<Map<String, Object>> patchDataList = new ArrayList<>();
        //用户合约操作对象
        UserStorageContract userStorageContract = new UserStorageContract();


        try {
            //获取所有的补丁
            patchList = fileUtil.fileRead(patchListPath);

            System.out.println("补丁数量:" + patchList.size());

            for (String ipfsHash : patchList) {

                System.out.println(ipfsHash);
                //从缓存文件中获取数据
                String s = propertyUtil.getData(ipfsHash);
                String[] arrStr = s.split("@@@");

                //补丁名称@@@发布者@@@对应的漏洞Hash发布时间@@@补丁描述@@@补丁star数@@@补丁评分
                Map<String, Object> map = new HashMap<>();
                map.put("ipfsHash", ipfsHash);
                map.put("patchName", arrStr[0]);
                map.put("username", arrStr[1]);
                map.put("vulnerabilityHash", arrStr[2]);
                map.put("releaseDate", arrStr[3]);
                map.put("description", arrStr[4]);
                map.put("star", Integer.parseInt(arrStr[5]));
                map.put("score", Integer.parseInt(arrStr[6]));

                patchDataList.add(map);

            }

        }catch (Exception e) {
            e.printStackTrace();
        }


        return patchDataList;
    }

    //得到用户数量
    public int getNumberOfUser() {

        FileUtil fileUtil = new FileUtil();
        //用户列表
        ArrayList<String> userList = new ArrayList<>();

        try {
            userList = fileUtil.fileRead(userListPath);

        }catch (Exception e) {
            e.printStackTrace();
        }

        return userList.size();
    }

    //获取漏洞评估记录
    public List<Map<String, Object>> acquireVulnerabilityAssessmentRecords() {

        FileUtil fileUtil = new FileUtil();
        //漏洞记录列表
        ArrayList<String> vulnerabilityAssessmentRecords = new ArrayList<>();
        //漏洞记录数据映射
        List<Map<String, Object>> vulnerabilityAssessmentList = new ArrayList<>();

        try {

            vulnerabilityAssessmentRecords = fileUtil.fileRead(vulnerabilityAssessmentPath);

        }catch (Exception e) {
            e.printStackTrace();
        }

        for (String record : vulnerabilityAssessmentRecords) {

            Map<String, Object> map = new HashMap<>();
            String[] recordArr = record.split("@@@");
            map.put("date", recordArr[0]);
            map.put("username", recordArr[1]);
            map.put("ipfsHash", recordArr[2]);
            map.put("score", recordArr[3]);

            //System.out.println(recordArr[0] + map.get("date"));

            vulnerabilityAssessmentList.add(map);
        }

        System.out.println("vulnerabilityRecord:" + vulnerabilityAssessmentRecords.size());

        return vulnerabilityAssessmentList;

    }

    //获取补丁评估记录
    public List<Map<String, Object>> acquirePatchAssessmentRecords() {

        FileUtil fileUtil = new FileUtil();
        //补丁记录列表
        ArrayList<String> patchAssessmentRecords = new ArrayList<>();
        //补丁记录数据映射
        List<Map<String, Object>> patchAssessmentList = new ArrayList<>();

        try {

            patchAssessmentRecords = fileUtil.fileRead(patchAssessmentPath);

        }catch (Exception e) {
            e.printStackTrace();
        }

        for (String record : patchAssessmentRecords) {

            Map<String, Object> map = new HashMap<>();
            String[] recordArr = record.split("@@@");
            map.put("date", recordArr[0]);
            map.put("username", recordArr[1]);
            map.put("ipfsHash", recordArr[2]);
            map.put("score", recordArr[3]);

            patchAssessmentList.add(map);

        }

        System.out.println("patchRecord:" + patchAssessmentRecords.size());

        return patchAssessmentList;

    }

    /*
    public static void main(String[] args) {

        HomeDataAcquireService homeDataAcquireService = new HomeDataAcquireService();

        List<Map<String, Object>> list = homeDataAcquireService.acquireUserContributionList();

        System.out.println(list.size());
        System.out.println(list.get(0).get("totalContribution"));
        System.out.println(list.get(0).get("residualContribution"));

    }
*/

}
