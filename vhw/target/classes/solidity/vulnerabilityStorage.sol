contract VulnerabilityStorage {
    
    //漏洞结构体
    struct Vulnerability {
        //漏洞标识，即ipfsHash
        string ipfsHash;
        //漏洞名称
        string name;
        //漏洞发布者
        string username;
        //漏洞发布时间
        string releaseTime;
        //漏洞修复时间
        string doneTime;
        //漏洞star数量
        uint64 starCount;
        //补丁列表
        string[] patches;
        //补丁数量
        uint64 pCount;
        //漏洞综合评分
        uint64 totalScore;
        //是否解决
        bool isDone;
        //漏洞是否存在
        bool isExisted;
    }    
    
    
    mapping(string => Vulnerability) vulnerabilityMap;
    
    //判断漏洞是否存在
    function vulnerabilityExisted(string ipfsHash) public returns (bool) {
        //存在
        if (vulnerabilityMap[ipfsHash].isExisted) {
            return true;
        }
        
        //不存在
        return false;
        
    }
    
    //更新漏洞修复数据
    function updateDoneInformation(string ipfsHash, string doneTime) returns (bool) {
        
        if (vulnerabilityExisted(ipfsHash)) {
            vulnerabilityMap[ipfsHash].doneTime = doneTime;
            vulnerabilityMap[ipfsHash].isDone = true;
            
            return true;
        }
        
        return false;
        
    }
    
    //star加一
    function incStar(string ipfsHash) returns (bool) {
        
        if (vulnerabilityExisted(ipfsHash)) {
            
            vulnerabilityMap[ipfsHash].starCount++;
            
            return true;
        }
        
        return false;
    }
    
    //增加漏洞总评分
    function addVulnerabilityTotalScore(string ipfsHash, uint64 addScore) public returns (bool) {
        
        if (vulnerabilityExisted(ipfsHash)) {
            
            vulnerabilityMap[ipfsHash].totalScore += addScore;
            
            return true;
        }
        
        return false;
        
    }
    
    //增加漏洞
    function  addVulnerability(string ipfsHash, string name, string username, string releaseTime) public returns (bool){
        
        //判断漏洞是否存在
        if (vulnerabilityExisted(ipfsHash)) {
            return false;
        }
        
        //新建漏洞实例
        vulnerabilityMap[ipfsHash].ipfsHash = ipfsHash;
        vulnerabilityMap[ipfsHash].name = name;
        vulnerabilityMap[ipfsHash].username = username;
        vulnerabilityMap[ipfsHash].releaseTime = releaseTime;
        vulnerabilityMap[ipfsHash].doneTime = "unfinished";
        vulnerabilityMap[ipfsHash].starCount = 0;
        vulnerabilityMap[ipfsHash].totalScore = 0;
        vulnerabilityMap[ipfsHash].isExisted = true;
        vulnerabilityMap[ipfsHash].pCount = 0;
        
        return true;
        
    }    
    
    //增加补丁
    function addPatch(string ipfsHash, string patchIpfsHash) public returns (bool) {
        
        //漏洞存在
        if (vulnerabilityExisted(ipfsHash)) {
        
            vulnerabilityMap[ipfsHash].patches.push(patchIpfsHash);
            vulnerabilityMap[ipfsHash].pCount++;
            
            return true;
        }
        
        return false;
        
    }
    
    //获取漏洞基本信息
    function getBasicInformation(string ipfsHash) public constant returns (string, string, string, string, uint64, uint64) {
        
        if (vulnerabilityExisted(ipfsHash)) {
        
            string name = vulnerabilityMap[ipfsHash].name;
            string username = vulnerabilityMap[ipfsHash].username;
            string releaseTime = vulnerabilityMap[ipfsHash].releaseTime;
            string doneTime = vulnerabilityMap[ipfsHash].doneTime;
            uint64 starCount = vulnerabilityMap[ipfsHash].starCount;
            uint64 totalScore = vulnerabilityMap[ipfsHash].totalScore;
        
        
            return (name, username, releaseTime, doneTime, starCount, totalScore);
        }
        
        return ("error", "", "", "", 0, 0);
    }
    
    //获取对应补丁数量
    function getNumberOfPatch(string ipfsHash) public constant returns (uint64) {
        
        if (vulnerabilityExisted(ipfsHash)) {
            return vulnerabilityMap[ipfsHash].pCount;
        }
        
        return 99999999;
    }
    
    //获取补丁ipfs哈希
    function getPatchIpfsHashByIndex(string ipfsHash, uint64 index) public constant returns (string) {
        
        if (vulnerabilityExisted(ipfsHash)) {
            
            return vulnerabilityMap[ipfsHash].patches[index];
        }
        
        return "error";
        
    }
    
    //获取漏洞名称
    function getVulnerabilityName(string ipfsHash) public constant returns (string) {
        return vulnerabilityMap[ipfsHash].name;
    }
    
    //获取漏洞发布者
    function getVulnerabilityUsername(string ipfsHash) public constant returns (string) {
        return vulnerabilityMap[ipfsHash].username;
    }
    
    //获取漏洞发布时间
    function getVulnerabilityReleaseTime(string ipfsHash) public constant returns (string) {
        return vulnerabilityMap[ipfsHash].releaseTime;
    }
    
    //获取漏洞修复时间
    function getVulnerabilityDoneTime(string ipfsHash) public constant returns (string) {
        return vulnerabilityMap[ipfsHash].doneTime;
    }
    
    //获取漏洞star数
    function getVulnerabilityStar(string ipfsHash) public constant returns (uint64) {
        return vulnerabilityMap[ipfsHash].starCount;
    }
    
    //获取漏洞总评分
    function getVulnerabilityTotalScore(string ipfsHash) public constant returns (uint64) {
        return vulnerabilityMap[ipfsHash].totalScore;
    }
    
}    