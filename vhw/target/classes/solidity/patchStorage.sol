contract PatchStorage {
    
    //补丁结构体
     struct Patch {
        //补丁标识，即ipfsHash
        string ipfsHash;
        //补丁名称
        string name;
        //补丁发布者
        string username;
        //补丁提交时间
        string submitTime;
        //补丁发布时间
        string releaseTime;
        //漏洞star数量
        uint64 starCount;
        //补丁对应的漏洞ipfs哈希
        string vulnerabilityIpfsHash;
        //补丁综合评分
        uint64 totalScore;
        //是否被漏洞发布者接受
        bool isPass;
        //补丁是否存在
        bool isExisted;
    }    
    
    //补丁列表
    mapping(string => Patch) patchMap;
    
    //判断补丁是否存在
    function patchExisted(string ipfsHash) public returns (bool) {
        //存在
        if (patchMap[ipfsHash].isExisted) {
            return true;
        }
        
        //不存在
        return false;
        
    }
    
    //判断补丁是否审核通过
    function patchPassed(string ipfsHash) public returns (bool) {
        
        //审核通过
        if (patchMap[ipfsHash].isPass) {
            return true;
        }
        
        return false;
        
    }
    
    //添加补丁发布时间,设置审核通过标志
    function addReleaseTime(string ipfsHash, string releaseTime) returns (bool) {
        
        if (patchExisted(ipfsHash)) {
            patchMap[ipfsHash].releaseTime = releaseTime;
            patchMap[ipfsHash].isPass = true;
            
            return true;
        }
        
        return false;
        
    }
    
    //star加一
    function incStar(string ipfsHash) returns (bool) {
        //判断补丁是否存在
        if (patchExisted(ipfsHash)) {
            //判断补丁是否审核通过
            if (patchPassed(ipfsHash)) {
                
                patchMap[ipfsHash].starCount++;
            
                return true;
            }
        }
        
        return false;
    }
    
    //增加漏洞总评分
    function addPatchTotalScore(string ipfsHash, uint64 addScore) public returns (bool) {
        //判断补丁是否存在
        if (patchExisted(ipfsHash)) {
            //判断补丁是否审核通过
            if (patchPassed(ipfsHash)) {
            
                patchMap[ipfsHash].totalScore += addScore;
            
                return true;
            }
        }
        
        return false;
        
    }
    
    //增加漏洞
    function  addPatch(string ipfsHash, string name, string username, string submitTime, string vulnerabilityIpfsHash) public returns (bool){
        
        //判断漏洞是否存在
        if (patchExisted(ipfsHash)) {
            return false;
        }
        
        //新建漏洞实例
        patchMap[ipfsHash].ipfsHash = ipfsHash;
        patchMap[ipfsHash].name = name;
        patchMap[ipfsHash].username = username;
        patchMap[ipfsHash].submitTime = submitTime;
        patchMap[ipfsHash].releaseTime = "unpass";
        patchMap[ipfsHash].vulnerabilityIpfsHash = vulnerabilityIpfsHash;
        patchMap[ipfsHash].starCount = 0;
        patchMap[ipfsHash].totalScore = 0;
        patchMap[ipfsHash].isExisted = true;
        
        return true;
        
    }    
    
    //获取漏洞基本信息
    function getBasicInformation(string ipfsHash) public constant returns (string, string, string, string, string, uint64, uint64) {
        
        if (patchExisted(ipfsHash)) {
        
            string name = patchMap[ipfsHash].name;
            string username = patchMap[ipfsHash].username;
            string submitTime = patchMap[ipfsHash].submitTime;
            string releaseTime = patchMap[ipfsHash].releaseTime;
            string vulnerabilityIpfsHash = patchMap[ipfsHash].vulnerabilityIpfsHash;
            uint64 starCount = patchMap[ipfsHash].starCount;
            uint64 totalScore = patchMap[ipfsHash].totalScore;
        
            return (name, username, submitTime, releaseTime, vulnerabilityIpfsHash, starCount, totalScore);
        }
        
        return ("error", "", "", "", "", 0, 0);
    }
    
    //获取补丁名称
    function getPatchName(string ipfsHash) public constant returns (string) {
        return patchMap[ipfsHash].name;
    }
    
    //获取补丁发布者
    function getPatchUsername(string ipfsHash) public constant returns (string) {
        return patchMap[ipfsHash].username;
    }
    
    //获取补丁提交时间
    function getPatchSubmitTime(string ipfsHash) public constant returns (string) {
        return patchMap[ipfsHash].submitTime;
    }
    
    //获取补丁发布时间
    function getPatchReleaseTime(string ipfsHash) public constant returns (string) {
        return patchMap[ipfsHash].releaseTime;
    }
    
    //获取补丁对应的漏洞ipfs哈希
    function getVulnerabilityIpfsHash(string ipfsHash) public constant returns (string) {
        return patchMap[ipfsHash].vulnerabilityIpfsHash;
    }
    
    //获取补丁star数
    function getPatchStar(string ipfsHash) public constant returns (uint64) {
        return patchMap[ipfsHash].starCount;
    }
    
    //获取补丁总评分
    function getPatchTotalScore(string ipfsHash) public constant returns (uint64) {
        return patchMap[ipfsHash].totalScore;
    }
    
}    